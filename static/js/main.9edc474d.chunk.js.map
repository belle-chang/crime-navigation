{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","App","mapContainerRef","useRef","useState","lng","setLng","lat","setLat","zoom","setZoom","useEffect","map","Map","container","current","style","center","on","addSource","type","data","cluster","clusterMaxZoom","clusterRadius","addLayer","id","source","filter","paint","layout","addControl","NavigationControl","directions","MapboxDirections","unit","profile","getCenter","toFixed","getZoom","dictionary","bos","fw","key","hasOwnProperty","console","log","link","document","createElement","href","className","textContent","onclick","e","index","clickedLayer","preventDefault","stopPropagation","getLayoutProperty","setLayoutProperty","this","getElementById","appendChild","remove","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9edc474d.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './App.css';\nimport mapboxgl from 'mapbox-gl';\n// import 'mapbox-gl/dist/mapbox-gl.css';\nimport MapboxDirections from '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions'\nimport '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css'\n\nmapboxgl.accessToken =\n    'pk.eyJ1IjoiYW5hYmVsbGVjaGFuZyIsImEiOiJja20xZmVxNGYwMTRpMnJtemJ0M3podzFzIn0.punpaEzFpzG4kmbcpdtwUQ'\n\nconst App = () => {\n  const mapContainerRef = useRef(null);\n\n  const [lng, setLng] = useState(-71.0799);\n  const [lat, setLat] = useState(42.3083)\n  const [zoom, setZoom] = useState(11.59);\n\n  // Initialize map when component mounts\n  useEffect(() => {\n    // crate new map\n    const map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n    //   style: 'mapbox://styles/anabellechang/ckm11howb889h17qf87wj3ld6',\n      center: [lng, lat],\n      zoom: zoom\n    });\n\n    map.on('load', function() {\n      // boston\n        map.addSource(\"crime-bos\", {\n            type: 'geojson',\n            // data: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_ports.geojson'\n            data: 'https://raw.githubusercontent.com/belle-chang/navi-crime/main/data/jsonformatter-2.json',\n            cluster: true,\n            clusterMaxZoom: 14,\n            clusterRadius: 50\n        });\n        // https://docs.mapbox.com/mapbox-gl-js/example/cluster/\n        // Add our layer\n        map.addLayer({\n            id: \"clusters\",\n            source: \"crime-bos\", // this should be the id of the source\n            type: \"circle\",\n            filter: ['has', 'point_count'],\n            // paint properties\n            paint: {\n            //   \"circle-opacity\": 0.75,\n            //   \"circle-stroke-width\": 1,\n            //   \"circle-radius\": 4,\n            //   \"circle-color\": \"#FFEB3B\"\n                'circle-color': [\n                    'step',\n                    ['get', 'point_count'],\n                    '#51bbd6',\n                    25,\n                    '#f1f075',\n                    100,\n                    '#f28cb1'\n                    ],\n                    'circle-radius': [\n                    'step',\n                    ['get', 'point_count'],\n                    20,\n                    25,\n                    30,\n                    100,\n                    40\n                ]\n            },\n            layout: {\n                // make layer visible by default\n                'visibility': 'visible'\n            }\n        });\n\n        map.addLayer({\n            id: 'cluster-count',\n            // id: 'clusters',\n            type: 'symbol',\n            source: 'crime-bos',\n            filter: ['has', 'point_count'],\n            layout: {\n                'text-field': '{point_count_abbreviated}',\n                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n                'text-size': 12,\n                'visibility': 'visible'\n            }\n        });\n\n        map.addLayer({\n            id: 'unclustered-point',\n            // id: 'clusters',\n            type: 'circle',\n            source: 'crime-bos',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n                'circle-color': '#11b4da',\n                'circle-radius': 4,\n                'circle-stroke-width': 1,\n                'circle-stroke-color': '#fff'\n                },\n            layout: {\n                // make layer visible by default\n                'visibility': 'visible'\n                }\n        });\n        \n      // fort worth\n        map.addSource(\"crime-fw\", {\n            type: 'geojson',\n            // data: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_ports.geojson'\n            data: 'https://raw.githubusercontent.com/belle-chang/crime-navi/main/data/fw_final.json',\n            cluster: true,\n            clusterMaxZoom: 14,\n            clusterRadius: 50\n        });\n        // https://docs.mapbox.com/mapbox-gl-js/example/cluster/\n        // Add our layer\n        map.addLayer({\n            id: \"clusters-fw\",\n            source: \"crime-fw\", // this should be the id of the source\n            type: \"circle\",\n            filter: ['has', 'point_count'],\n            // paint properties\n            paint: {\n            //   \"circle-opacity\": 0.75,\n            //   \"circle-stroke-width\": 1,\n            //   \"circle-radius\": 4,\n            //   \"circle-color\": \"#FFEB3B\"\n                'circle-color': [\n                    'step',\n                    ['get', 'point_count'],\n                    '#51bbd6',\n                    25,\n                    '#f1f075',\n                    100,\n                    '#f28cb1'\n                    ],\n                    'circle-radius': [\n                    'step',\n                    ['get', 'point_count'],\n                    20,\n                    25,\n                    30,\n                    100,\n                    40\n                ]\n            },\n            layout: {\n                // make layer visible by default\n                'visibility': 'visible'\n            }\n        });\n\n        map.addLayer({\n            id: 'cluster-count-fw',\n            // id: 'clusters',\n            type: 'symbol',\n            source: 'crime-fw',\n            filter: ['has', 'point_count'],\n            layout: {\n                'text-field': '{point_count_abbreviated}',\n                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n                'text-size': 12,\n                'visibility': 'visible'\n            }\n        });\n\n        map.addLayer({\n            id: 'unclustered-point-fw',\n            // id: 'clusters',\n            type: 'circle',\n            source: 'crime-fw',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n                'circle-color': '#11b4da',\n                'circle-radius': 4,\n                'circle-stroke-width': 1,\n                'circle-stroke-color': '#fff'\n                },\n            layout: {\n                // make layer visible by default\n                'visibility': 'visible'\n                }\n        });\n      \n    });\n\n    // Add navigation control (the +/- zoom buttons) the top right of the canvas\n    map.addControl(new mapboxgl.NavigationControl());\n    // map.addControl(new mapboxgl.NavigationControl(), 'top-right');\n\n    const directions = new MapboxDirections({\n      accessToken: mapboxgl.accessToken,\n      unit: 'metric',\n      profile: 'mapbox/driving',\n    });\n\n    // Integrates directions control with map\n    map.addControl(directions, 'bottom-right');\n\n    map.on('move', function() {\n      setLng(map.getCenter().lng.toFixed(4));\n      setLat(map.getCenter().lat.toFixed(4));\n      setZoom(map.getZoom().toFixed(2));\n    });\n\n    // CHANGE: Add layer names that need to be toggled\n    var dictionary = {\n        bos: ['clusters', 'cluster-count', 'unclustered-point'],\n        fw: ['clusters-fw', 'cluster-count-fw', 'unclustered-point-fw']\n    }\n\n    for (let key in dictionary) {\n        // check if the property/key is defined in the object itself, not in parent\n        if (dictionary.hasOwnProperty(key)) {           \n            console.log(key, dictionary[key]);\n\n            var link = document.createElement('a');\n            link.href = '#';\n            link.className = 'active';\n            link.textContent = key;\n            link.onclick = function (e) {\n                \n                for (var index in dictionary[key]) {\n                var clickedLayer = dictionary[key][index];\n                e.preventDefault();\n                e.stopPropagation();\n            \n                var visibility = map.getLayoutProperty(clickedLayer, 'visibility');\n            \n                if (visibility === 'visible') {\n                    map.setLayoutProperty(clickedLayer, 'visibility', 'none');\n                    this.className = '';\n                } else {\n                    this.className = 'active';\n                    map.setLayoutProperty(clickedLayer, 'visibility', 'visible');\n                }\n            }\n            \n        };\n        var layers = document.getElementById('menu');\n        layers.appendChild(link);\n        }\n    }\n    \n\n    // Clean up on unmount\n    return () => map.remove();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div>\n        <nav id=\"menu\"></nav>\n      <div className='sidebarStyle'>\n        <div>\n          Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\n        </div>\n      </div>\n      <div className='map-container' ref={mapContainerRef} />\n      \n    </div>\n  );\n};\n\nexport default App;\n\n// class App extends React.Component {\n\n//   componentDidMount() {\n\n//     // Creates new map instance\n//     const map = new mapboxgl.Map({\n//       container: this.mapWrapper,\n//       style: 'mapbox://styles/mapbox/streets-v10',\n//       center: [-73.985664, 40.748514],\n//       zoom: 12\n//     });\n\n//     // Creates new directions control instance\n//     const directions = new MapboxDirections({\n//       accessToken: mapboxgl.accessToken,\n//       unit: 'metric',\n//       profile: 'mapbox/driving',\n//     });\n\n//     // Integrates directions control with map\n//     map.addControl(directions, 'top-left');\n//   }\n\n//   render() {\n//     return (\n//       // Populates map by referencing map's container property\n//       <div ref={el => (this.mapWrapper = el)} className=\"mapWrapper\" />\n//     );\n//   }\n// }\n\n// export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}