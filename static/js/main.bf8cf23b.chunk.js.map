{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","App","mapContainerRef","useRef","useState","lng","setLng","lat","setLat","zoom","setZoom","useEffect","min_intersections","current_city","route","map","Map","container","current","style","center","obstacle","turf","fw","units","bbox","polygon","counter","num_intersections","Infinity","time","on","addSource","type","data","allcities","cluster","clusterMaxZoom","clusterRadius","addLayer","id","source","filter","paint","layout","cities","lng_lat_zoom","bos","chi","sf","ny","once","i","length","console","log","link","document","createElement","href","className","textContent","getElementById","appendChild","menu_cities","getElementsByClassName","onclick","e","flyTo","getStyle","layers","coordinates","features","geometry","slice","offense_type","properties","Math","abs","lngLat","Popup","setLngLat","setHTML","addTo","popup","closeButton","closeOnClick","getCanvas","cursor","remove","addControl","NavigationControl","directions","MapboxDirections","unit","profile","geometries","alternatives","walkway_bias","alley_bias","steps","controls","instructions","isEmpty","obj","Object","keys","hide_element","el_name","visibility","setLayoutProperty","innerHTML","addDirections","removeRoutes","legs","str","distance","toFixed","duration","miles","dist","feet","maneuver","instruction","window","alert","tempo","getOrigin","tempd","getDestination","notice","routes","getSource","setData","forEach","routeLine","polyline","toGeoJSON","points_within","intersects","isect_len","offense_count","random_waypoint","setWaypoint","getCenter","getZoom","close_loader","parentElement","collapsible_menu","collapse","menu_items","classList","add","size","fill","ref","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bf8cf23b.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './App.css';\nimport mapboxgl from 'mapbox-gl';\n// import 'mapbox-gl/dist/mapbox-gl.css';\nimport MapboxDirections from '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions'\nimport '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css'\nimport * as turf from '@turf/turf';\nimport polyline from '@mapbox/polyline'\nimport bos from './data/bos_aggregate.json'\nimport fw from './data/fw_aggregate.json'\nimport chi from './data/chi_aggregate.json'\nimport sf from './data/sf_aggregate.json'\nimport ny from './data/ny_aggregate.json'\nimport allcities from './data/allcities_aggregate.json'\n// import allcities from './data/allcities_aggregate.json'\nimport {XIcon, QuestionIcon} from '@primer/octicons-react'\n\nmapboxgl.accessToken =\n    'pk.eyJ1IjoiYW5hYmVsbGVjaGFuZyIsImEiOiJja20xZmVxNGYwMTRpMnJtemJ0M3podzFzIn0.punpaEzFpzG4kmbcpdtwUQ'\n\nconst App = () => {\n    // playign with here api\n    {\n    // const apiUrl = 'https://route.ls.hereapi.com/routing/7.2/calculateroute.json?apiKey=dQsyJbZZS_IvjJSlSFFxt1tadvGuxoOzkxEn5wGTP80&waypoint0=geo!52.5184443440238,13.383906494396967&waypoint1=geo!52.51435421904425,13.396947378094524&mode=fastest;car;traffic:disabled&avoidareas=52.517100760,13.3905424488;52.5169701849,13.391808451!52.51623131288022,13.389888672738778;52.51335487996589,13.395274548440511!52.52006148651319,13.385160024545286;52.517760038213815,13.389707563495335';\n    // fetch(apiUrl)\n    //   .then((response) => response.json())\n    //   .then((data) => console.log('This is your data', data));\n    }\n      \n    const mapContainerRef = useRef(null);\n    // boston\n    // const [lng, setLng] = useState(-71.0799);\n    // const [lat, setLat] = useState(42.3083);\n    // const [zoom, setZoom] = useState(13.59);\n\n    const [lng, setLng] = useState(-96.2485);\n    const [lat, setLat] = useState(38.5370);\n    const [zoom, setZoom] = useState(4.16);\n    // Initialize map when component mounts\n    useEffect(() => {\n        // crate new map\n        const map = new mapboxgl.Map({\n        container: mapContainerRef.current,\n        style: 'mapbox://styles/mapbox/dark-v10',\n        //   style: 'mapbox://styles/anabellechang/ckm11howb889h17qf87wj3ld6',\n        center: [lng, lat],\n        zoom: zoom\n        });\n\n        let obstacle = turf.buffer(fw, 7, { units: \"meters\" });\n        let bbox = [0, 0, 0, 0];\n        let polygon = turf.bboxPolygon(bbox);\n        let counter = 0;\n        let max_attempts = 50;\n        let min_intersections;\n        let num_intersections = Infinity;\n        let time = Infinity;\n        let current_city;\n        let route;\n\n        map.on('load', function() {\n            map.addSource(\"crime\", {\n                type: 'geojson',\n                // data: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_ports.geojson'\n                data: allcities,\n                cluster: true,\n                clusterMaxZoom: 14,\n                clusterRadius: 50\n            });\n\n            // heatmap layer\n            // map.addLayer({\n            //     'id': 'crime-heat',\n            //     'type': 'heatmap',\n            //     'source': 'crime',\n            //     // 'maxzoom': 9,\n            //     'paint': {\n            //         // Increase the heatmap weight based on frequency and property magnitude\n            //         'heatmap-weight': {\n            //             // 'interpolate',\n            //             // ['linear'],\n            //             // ['get', 'offense_count'],\n            //             // 1, 0,\n            //             // 6, 2,\n            //             // 10, 6\n            //             property: 'offense_count',\n            //             type: 'exponential',\n            //             stops: [\n            //                 [1, 1],\n            //                 [5, 5],\n            //                 [15, 10]\n            //             ]\n            //         },\n            //         // Increase the heatmap color weight weight by zoom level\n            //         // heatmap-intensity is a multiplier on top of heatmap-weight\n            //         // 'heatmap-intensity': [\n            //         //     'interpolate',\n            //         //     ['linear'],\n            //         //     ['zoom'],\n            //         //     1, 1,\n            //         //     3, 5,\n            //         //     7, 10\n            //         // ],\n            //         'heatmap-intensity': {\n            //             stops: [\n            //               [11, 1],\n            //               [15, 3]\n            //             ]\n            //           },\n            //         // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n            //         // Begin color ramp at 0-stop with a 0-transparancy color\n            //         // to create a blur-like effect.\n            //         'heatmap-color': [\n            //             'interpolate',\n            //             ['linear'],\n            //             ['heatmap-density'],\n            //             0,\n            //             'rgba(236,222,239,0)',\n            //             0.2,\n            //             'rgb(208,209,230)',\n            //             0.4,\n            //             'rgb(166,189,219)',\n            //             0.6,\n            //             'rgb(103,169,207)',\n            //             0.8,\n            //             'rgb(28,144,153)'\n            //         ],\n            //         // Adjust the heatmap radius by zoom level\n            //         'heatmap-radius': {\n            //             stops: [\n            //               [5, 15],\n            //               [15, 20]\n            //             ]\n            //         },\n            //         // Transition from heatmap to circle layer by zoom level\n            //         'heatmap-opacity': {\n            //             'default': 1,\n            //             'stops': [\n            //             [14, 1],\n            //             [15, 0]\n            //             ]\n            //         }\n            //     }\n            // });\n\n            map.addLayer({\n                id: \"clusters\",\n                source: \"crime\", // this should be the id of the source\n                type: \"circle\",\n                filter: ['has', 'point_count'],\n                // paint properties\n                paint: {\n                    \"circle-opacity\": 0.75,\n                //   \"circle-stroke-width\": 1,\n                //   \"circle-radius\": 4,\n                //   \"circle-color\": \"#FFEB3B\"\n                    'circle-color': [\n                        'step',\n                        ['get', 'point_count'],\n                        '#79ad00', 10,\n                        '#ffd359', 40,\n                        '#ff9e59', 75,\n                        '#b83e2c'\n                        ],\n                        'circle-radius': [\n                        // 'step',\n                        'interpolate',\n                        ['exponential', 1],\n                        ['get', 'point_count'],\n                        7, 10,\n                        15, 20,\n                        50, 35,\n                        100, 45,\n                        200, 50,\n                        400, 60,\n                        1000, 70,\n                        150000, 75\n                            // 25, 100000,\n                            // 35, 10000,\n                            // 45, 150000\n                        // 'interpolate',\n            //             // ['linear'],\n            //             // ['get', 'offense_count'],\n            //             // 1, 0,\n            //             // 6, 2,\n            //             // 10, 6\n                    ]\n                },\n                layout: {\n                    // make layer visible by default\n                    'visibility': 'visible'\n                }\n            });\n\n            map.addLayer({\n                id: 'cluster-count',\n                // id: 'clusters',\n                type: 'symbol',\n                source: \"crime\", // this should be the id of the source\n                filter: ['has', 'point_count'],\n                layout: {\n                    'text-field': '{point_count_abbreviated}',\n                    'text-font': ['Arial Unicode MS Bold'],\n                    'text-size': 12,\n                    'visibility': 'visible'\n                }\n            });\n\n            map.addLayer({\n                id: 'unclustered-point',\n                // id: 'clusters',\n                type: 'circle',\n                source: \"crime\", // this should be the id of the source\n                filter: ['!', ['has', 'point_count']],\n                paint: {\n                    'circle-color': '#14e8ff',\n                    // 'circle-color': '#ffffff',\n                    'circle-radius': 2.5,\n                    'circle-stroke-width': 5,\n                    'circle-stroke-opacity': 0\n                    // 'circle-stroke-color': '#fff'\n                    },\n                layout: {\n                    // make layer visible by default\n                    'visibility': 'visible'\n                    }\n            });\n            \n            // testing routing api\n            {    \n            map.addSource('route_line', {\n                type: 'geojson',\n                data: {\n                    type: 'Feature'\n                }\n            });\n                 \n            map.addLayer({\n                id: 'route_line',\n                type: 'line',\n                source: 'route_line',\n                layout: {\n                'line-join': 'round',\n                'line-cap': 'round'\n                },\n                paint: {\n                'line-color': '#4881c5',\n                'line-opacity': 0.75,\n                'line-width': 10,\n                'line-blur': 0.5,\n                }\n            });\n                 \n            // Source and layer for the bounding box\n            map.addSource('bounding_box', {\n                type: 'geojson',\n                data: {\n                type: 'Feature'\n                }\n            });\n            map.addLayer({\n                id: 'bounding_box',\n                type: 'fill',\n                source: 'bounding_box',\n                layout: {},\n                paint: {\n                'fill-color': '#850000',\n                'fill-opacity': 0.35,\n                'fill-outline-color': '#630000'\n                }\n            });\n            }\n        });\n\n        let cities = ['Boston', 'Fort Worth', 'Chicago', 'San Francisco', 'New York'];\n        \n        let lng_lat_zoom = {\n            \"Boston\": {\n                center: [-71.0799, 42.3083],\n                zoom: 11.27\n            },\n            \"Fort Worth\": {\n                center: [-97.3444, 32.8168],\n                zoom: 9.73\n            },\n            \"Chicago\": {\n                center: [-87.72023,41.83138],\n                zoom: 10\n            },\n            \"San Francisco\": {\n                center: [-122.44779,37.76190],\n                zoom: 12\n            },\n            \"New York\": {\n                center: [-74.0008, 40.7197],\n                zoom: 10\n            }\n        }\n        let data = {\n            \"Boston\": bos,\n            \"Fort Worth\": fw,\n            \"Chicago\": chi,\n            \"San Francisco\": sf,\n            \"New York\": ny\n        }\n\n        // once map loads, populate menu bar\n        map.once('load', function() {\n            for (let i = 0; i < cities.length; i++) {\n                console.log(cities[i])        \n                let link = document.createElement('a');\n                link.id = cities[i];\n                link.href = '#';\n                link.className = 'active city_menu collapse';\n                link.textContent = cities[i];\n                let layers = document.getElementById('menu');\n                layers.appendChild(link);\n            }\n            // fly to city, set obstacle \n            let menu_cities = document.getElementsByClassName(\"city_menu\");\n            for (let i = 0; i < menu_cities.length; i++) {\n                menu_cities[i].onclick = function(e) {\n                    map.flyTo(lng_lat_zoom[menu_cities[i].id])\n                    // obstacle = turf.buffer(data[cities[i].id], 7, { units: \"meters\" });\n                    current_city = data[menu_cities[i].id]\n                }\n                // map.getSource('obstacles').setData(obstacle);\n            }\n            console.log(map.getStyle().layers)\n        })\n        // console.log(map.getStyle())\n\n        // // When a click event occurs on a feature in the places layer, open a popup at the\n        // // location of the feature, with description HTML from its properties.\n        map.on('click', 'unclustered-point', function (e) {\n            var coordinates = e.features[0].geometry.coordinates.slice();\n            var offense_type = e.features[0].properties.offense_type;\n            \n            // Ensure that if the map is zoomed out such that multiple\n            // copies of the feature are visible, the popup appears\n            // over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n            }\n            console.log(offense_type)\n            console.log(typeof(offense_type))\n            new mapboxgl.Popup()\n                .setLngLat(coordinates)\n                .setHTML(offense_type)\n                .addTo(map);\n        });\n\n        var popup = new mapboxgl.Popup({\n            closeButton: false,\n            closeOnClick: false\n        });\n\n        // Change the cursor to a pointer when the mouse is over the places layer.\n        map.on('mouseenter', 'unclustered-point', function (e) {\n            map.getCanvas().style.cursor = 'pointer';\n            var coordinates = e.features[0].geometry.coordinates.slice();\n            var offense_type = e.features[0].properties.offense_type;\n            \n            // Ensure that if the map is zoomed out such that multiple\n            // copies of the feature are visible, the popup appears\n            // over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n            }\n            console.log(offense_type)\n            console.log(typeof(offense_type))\n            popup.setLngLat(coordinates)\n                .setHTML(offense_type)\n                .addTo(map);\n        });\n            \n        // Change it back to a pointer when it leaves.\n        map.on('mouseleave', 'unclustered-point', function () {\n            map.getCanvas().style.cursor = '';\n            popup.remove();\n        });\n\n        // add navigation control (the +/- zoom buttons) the top right of the canvas\n        map.addControl(new mapboxgl.NavigationControl());\n\n        // add directions\n        const directions = new MapboxDirections({\n            accessToken: mapboxgl.accessToken,\n            unit: 'imperial',\n            profile: 'mapbox/walking',\n            geometries: 'geojson',\n            alternatives: false,\n            flyTo: false,\n            walkway_bias: .75,\n            alley_bias: -.75,\n            steps: true,\n            controls: { instructions: false },\n            flyTo: false\n        });\n\n        // add directions control with map\n        map.addControl(directions, 'top-left');\n\n        // check if obj is empty\n        let isEmpty = function(obj){\n            return Object.keys(obj).length === 0;\n        }\n\n        // hide an element\n        let hide_element = function(el_name) {\n            let el = document.getElementById(el_name);\n            el.style.visibility = \"hidden\";\n        }\n\n        // show an element\n        let show_element = function(el_name) {\n            let el = document.getElementById(el_name);\n            el.style.visibility = \"visible\";\n        }\n\n        // when directions clear, remove bbox, hide instructions and notice\n        directions.on('clear', function(e) {\n            counter = 0;\n            num_intersections = Infinity;\n            time = Infinity;\n            map.setLayoutProperty('bounding_box', 'visibility', 'none');\n            let instructions = document.getElementById('instructions')\n            instructions.innerHTML = \"\"\n            instructions.style.visibility = \"hidden\"\n            hide_element(\"notice\");\n        });\n\n        let addDirections = function(route) {\n            directions.removeRoutes();\n            hide_element(\"notice\")\n            let route_num = document.getElementById(\"route_num\");\n            route_num.innerHTML = \"Running route \"\n            let instructions = document.getElementById('instructions');\n            instructions.style.visibility = \"visible\"\n            let steps = route.legs[0].steps;\n            console.log(steps)\n            let total_dist = (route.distance / 1609.344).toFixed(2);\n            let duration = (route.duration / 60).toFixed(0);\n            let str = \"<tr> \"+ \"<td id=\\\"column1\\\"><b>\" + total_dist + \"mi\" + \"</b></td>\" + \"<td id=\\\"column2\\\">\" + duration + \"min\" + \"</td>\" + \"</tr>\"\n            instructions.innerHTML += str;\n            for (var i = 0; i < steps.length; i++) {                \n                let miles = (steps[i].distance / 1609.344).toFixed(2);\n                let dist = miles;\n                let unit = \"mi\";\n                let feet = (steps[i].distance / 0.3048).toFixed(0);\n                if (miles < 0.15) {\n                    dist = feet;\n                    unit = \"ft\"\n                }\n                // let str = \"<li> \"+steps[i].maneuver.instruction + \"--\" + dist + unit + \"</li>\"\n                let str = \"<tr> \"+ \"<td id=\\\"column1\\\">\" + dist + unit + \"</td>\" + \"<td id=\\\"column2\\\">\" + steps[i].maneuver.instruction + \"</td>\" + \"</tr>\"\n                instructions.innerHTML += str;\n            }\n        }\n\n        directions.on('route', function (e) {\n            // make sure city is selected\n            if (current_city == null) {\n                window.alert(\"Please select a city in the menu in the bottom left!\");\n                directions.removeRoutes();\n                return;\n            }\n            // corner case - stop routing if origin / dest is removed while calculating route\n            let tempo = directions.getOrigin();\n            let tempd = directions.getDestination();\n            if (isEmpty(tempo) || isEmpty(tempd)) {\n                directions.removeRoutes();\n                return;\n            }\n            // show notice of which route is being calculated\n            let notice = document.getElementById(\"notice\");\n            if (notice.style.visibility != \"visible\") notice.style.visibility = \"visible\";\n            let route_num = document.getElementById(\"route_num\");\n            route_num.innerHTML = \"Running route \" + counter + \".\"\n            // if directions visible, hide\n            let instructions = document.getElementById('instructions');\n            if (instructions.style.visibility != \"hidden\") instructions.style.visibility = \"hidden\";\n            \n            let routes = e.route;\n             \n            if (counter >= max_attempts) {\n                // set route on map, add directions\n                e.route = route;\n                map.getSource('route_line').setData(min_intersections);\n                addDirections(e.route);\n            } \n            else {\n                routes.forEach((e) => {\n\n                    // make route and bbox visible\n                    map.setLayoutProperty('route_line', 'visibility', 'visible');\n                    map.setLayoutProperty('bounding_box', 'visibility', 'visible');\n                    \n                    // get GeoJson LineString feature of route\n                    let routeLine = polyline.toGeoJSON(e.geometry);\n                    \n                    // create a bbox around this route\n                    bbox = turf.bbox(routeLine);\n                    polygon = turf.bboxPolygon(bbox);\n\n                    // get pts in the city that are in bbox, check num of isects\n                    let points_within = turf.pointsWithinPolygon(current_city, polygon);\n                    obstacle = turf.buffer(points_within, 7, { units: \"meters\" });\n                    console.log(obstacle)\n                    let intersects = turf.lineIntersect(obstacle, routeLine);\n                    console.log(intersects)\n                    let isect_len = intersects.features.length;\n                    let current_total_isects = 0;\n                    for (let i = 0; i < isect_len; i++) {\n                        current_total_isects += intersects.features[i].properties.offense_count\n                    // console.log(intersects.features[i]);\n\n                    }\n\n                    // get route with minimum isects\n                    if (intersects.features.length <= num_intersections) {\n                        // route pruning\n                        if (intersects.features.length == num_intersections && e.duration < time) {\n                            num_intersections = intersects.features.length;\n                            min_intersections = routeLine;\n                            time = e.duration\n                            route = e;\n                        }\n                        else if (intersects.features.length < num_intersections) {\n                            num_intersections = intersects.features.length;\n                            min_intersections = routeLine;\n                            time = e.duration\n                            route = e;\n                        }\n                    }\n                    \n                    // update route line and bbox\n                    map.getSource('route_line').setData(routeLine);\n                    // map.getSource('directons-route-line').setData(routeLine);\n                    map.getSource('bounding_box').setData(polygon);\n                    \n                    // check if route isect w/ pts in bbox \n                    let no_isect = turf.booleanDisjoint(obstacle, routeLine);\n                    \n                    if (no_isect == true) {\n                        // hide bbox\n                        map.setLayoutProperty('bounding_box', 'visibility', 'none');\n                        route = e;\n\n                        // reset the counter, min intersections, distance\n                        counter = 0;\n                        num_intersections = Infinity;\n                        time = Infinity;\n                        addDirections(route);\n                    } \n                    else {\n                        counter++;\n                        // increase bbox by factor of counter\n                        polygon = turf.transformScale(polygon, counter * 0.025);\n                        bbox = turf.bbox(polygon);\n                        \n                        // add a random waypoint to get a route from the directions api\n                        let random_waypoint = turf.randomPoint(1, { bbox: bbox });\n                        directions.setWaypoint(\n                            0,\n                            random_waypoint['features'][0].geometry.coordinates\n                        );\n                    }\n                });\n            }\n        });\n\n        map.on('move', function() {\n            // shitty workaround\n            let tempo = directions.getOrigin();\n            let tempd = directions.getDestination();\n            if (isEmpty(tempo) || isEmpty(tempd)) {\n                map.setLayoutProperty('route_line', 'visibility', 'none');\n            }\n            setLng(map.getCenter().lng.toFixed(4));\n            setLat(map.getCenter().lat.toFixed(4));\n            setZoom(map.getZoom().toFixed(2));\n        });\n\n        // map.on('moveend', function() {\n        //     let lng = map.getCenter().lng.toFixed(4)\n        //     console.log(lng_city[lng])\n        //     if (lng_city[lng]) {\n        //         obstacle = turf.buffer(lng_city[lng], 7, { units: \"meters\" });\n        //         // map.getSource('obstacles').setData(obstacle);\n        //     }\n        // })\n        // let close_loader = document.getElementById(\"loader\");\n        let close_loader = document.getElementById(\"close\");\n        close_loader.onclick = function(e) {\n            close_loader.parentElement.style.visibility = \"hidden\";\n        }\n\n        let toggle_loader = document.getElementById(\"question\");\n        toggle_loader.onclick = function(e) {\n            if (close_loader.parentElement.style.visibility == \"hidden\")\n                close_loader.parentElement.style.visibility = \"visible\";\n            else\n                close_loader.parentElement.style.visibility = \"hidden\";\n        }\n\n        let collapsible_menu = document.getElementById(\"title\");\n        // console.log(collap)\n        let collapse = true;\n        collapsible_menu.onclick = function(e) {\n            console.log(\"hello\")\n            let menu_items = document.getElementsByClassName(\"city_menu\");\n            console.log(\"fml\")\n            collapse = !collapse;\n            if (collapse) {\n                for (let i = 0; i < menu_items.length; i++)  {\n                    menu_items[i].classList.add(\"collapse\");\n                }\n            }\n            if (!collapse) {\n                for (let i = 0; i < menu_items.length; i++)  {\n                    menu_items[i].classList.remove(\"collapse\");\n                }\n            }\n        }\n\n        \n\n        // Clean up on unmount\n        return () => map.remove();\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div>\n            <nav id=\"menu\">\n                <a id=\"title\" href=\"#\">\n                    Available Cities\n                </a>\n            </nav>\n            \n            <div id=\"loader\">\n                <br/>\n                <h1>A New Way to Navigate</h1>\n                As a female person of color, I have had plenty of experiences being harassed and followed while walking around in major metropolitan cities. \n                <br/>\n                The motivation behind this app is to create a way to navigate through dense urban areas, providing a route with the minimum number of reported crimes. <br/>\n                Watch as your route is calculated in real-time!\n                <br/>\n                <br/>\n                Each red circle indicates a cluster of plotted crime data, with the number signaling the cluster size. Zoom in closer to get a better look.\n                <br/>\n                <br/>\n                Current featured cities include Boston, Fort Worth, Chicago, San Francisco, and New York. <br/>\n                <a href=\"https://osf.io/zyaqn/\">Crime Open Database</a>, which aggregates police reports for 16 major cities from their state websites, was used for this project for illustrative purposes.\n                While reported crime is inherently biased due to overpolicing and our nation's history with discrimination, this project does not intend to draw any analyses nor conclusions from the data.\n                {/* <br />\n                Read more about the overpolicing, discrimination, and discrimination here, here and */}\n                <br/>\n                <br/>\n                Types of crime considered are: physical and sexual assault, false pretenses/swindle/confidence game, robbery, disorderly conduct, destruction of property, homicide, kidnapping/abduction, theft, weapons law violations, intimidation, peeping Toms, and driving under the influence.\n                <br/>\n                <br/>\n                Click on the lower left menu to select a city to get started!\n                {/* <a id=\"close\">x</a> */}\n                <div id=\"close\">\n                <XIcon size={24}/>\n                </div>\n            </div>\n        <div id=\"notice\">\n           <b>Your custom route is being calculated!</b> \n           <br/>\n           <div id=\"route_num\">Running route </div>\n        </div>\n\n        \n        {/* <table id=\"distance_duration\" >\n        </table> */}\n        <div id=\"table\">\n        <table id=\"instructions\" >\n            {/* <tbody>\n            <tr>\n                <td id=\"column1\"><b>.21mi</b> </td>\n                <td id=\"column2\">10min</td>\n            </tr>\n            <tr>\n                <td id=\"column1\">209ft</td>\n                <td id=\"column2\">Walk northeast on Puritan Avenue.</td>\n            </tr>\n            </tbody> */}\n        </table>\n        </div>\n        \n        {/* <div className='sidebarStyle'>\n            <div>\n            Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\n            </div>\n        </div> */}\n        <div id=\"question\">\n            <QuestionIcon size={24} fill=\"#FFFFFF\"/>\n        </div>\n        <div className='map-container' ref={mapContainerRef} />\n        \n        </div>\n    );\n};\n\nexport default App;\n\n// class App extends React.Component {\n\n//   componentDidMount() {\n\n//     // Creates new map instance\n//     const map = new mapboxgl.Map({\n//       container: this.mapWrapper,\n//       style: 'mapbox://styles/mapbox/streets-v10',\n//       center: [-73.985664, 40.748514],\n//       zoom: 12\n//     });\n\n//     // Creates new directions control instance\n//     const directions = new MapboxDirections({\n//       accessToken: mapboxgl.accessToken,\n//       unit: 'metric',\n//       profile: 'mapbox/driving',\n//     });\n\n//     // Integrates directions control with map\n//     map.addControl(directions, 'top-left');\n//   }\n\n//   render() {\n//     return (\n//       // Populates map by referencing map's container property\n//       <div ref={el => (this.mapWrapper = el)} className=\"mapWrapper\" />\n//     );\n//   }\n// }\n\n// export default App;\n\n                // turns off cities\n                // link.onclick = function (e) {\n                //     for (let index in dictionary[key]) {\n                //         let clickedLayer = dictionary[key][index];\n                //         e.preventDefault();\n                //         e.stopPropagation();\n                    \n                //         let visibility = map.getLayoutProperty(clickedLayer, 'visibility');\n                    \n                //         if (visibility === 'visible') {\n                //             map.setLayoutProperty(clickedLayer, 'visibility', 'none');\n                //             this.className = '';\n                //         } else {\n                //             this.className = 'active';\n                //             map.setLayoutProperty(clickedLayer, 'visibility', 'visible');\n                //         }\n                //     }\n                // };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}